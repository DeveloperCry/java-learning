<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.learning.spring.mapper.BlogMapper">
	<resultMap id="BaseResultMap" type="blog">
	    <id column="ID" jdbcType="INTEGER" property="id" />
	    <result column="NAME" jdbcType="VARCHAR" property="name" />
	    <result column="CREATE_DATE" jdbcType="TIMESTAMP" property="createDate" />
	    <result column="CREATE_USER" jdbcType="INTEGER" property="createUser" />
	    <result column="EDIT_DATE" jdbcType="TIMESTAMP" property="editDate" />
	    <result column="EDIT_USER" jdbcType="INTEGER" property="editUser" />
	    <result column="CONTENT" jdbcType="VARCHAR" property="content" />
	    <result column="TITLE" jdbcType="VARCHAR" property="title" />
	    <result column="AUTHOR_ID" jdbcType="INTEGER" property="authorId" />
	    <result column="STATUS" jdbcType="VARCHAR" property="status" />
  	</resultMap>

	<select id="selectBlogByName" resultType="Blog">
		SELECT * FROM BLOG WHERE NAME = #{name}
	</select>
	
	<!-- <select id="findBlog" resultType="Blog" parameterType="page">
       SELECT * FROM BLOG
    </select> -->
    <select id="findActiveBlogWithNameLike" resultType="Blog">
    	SELECT * FROM BLOG
    	WHERE STATUS = 'ACTIVE' 
    	<if test="name != null">
    		<bind name="namePattern" value="'%' + name + '%'"/>
    	<!-- concat(concat('%',#{username}),'%') -->
    		AND NAME LIKE #{namePattern}
    	</if>
    </select>
    
    <select id="findActiveBlogLike" resultType="Blog">
    	SELECT * FROM BLOG
    	WHERE STATUS = 'ACTIVE' 
    	<choose>
    		<when test="name != null">
    			<bind name="namePattern" value="'%' + name + '%'"/>
    			AND NAME LIKE #{namePattern}
    		</when>
    		<when test="blog != null and blog.title != null"><!-- using 'and' instead of '&&' -->
    			AND TITLE LIKE concat(concat('%',#{blog.title}),'%')
    		</when>
    		<otherwise>
    			AND AUTHOR_ID = 2
    		</otherwise>
    	</choose>
    </select>
    
    <!-- The where element knows to only insert "WHERE" if there is any content returned by the containing tags. 
    Furthermore, if that content begins with "AND" or "OR", it knows to strip it off.

	If the where element does not behave exactly as you like, you can customize it by defining your own trim element. 
	For example, the trim equivalent to the where element is:

	<trim prefix="WHERE" prefixOverrides="AND |OR ">
	  ...
	</trim>

	The prefixOverrides attribute takes a pipe delimited list of text to override, where whitespace is relevant. 
	The result is the removal of anything specified in the prefixOverrides attribute, and the insertion of anything in the prefix attribute. -->
    
    <!-- There is a similar solution for dynamic update statements called set. 
    The set element can be used to dynamically include columns to update, and leave out others. -->
    <select id="findBlogWithStatus" resultType="Blog">
    	SELECT * FROM BLOG 
    	<!-- Blow comments is error. Because the status and title may be null -->
    	<!-- WHERE 
    	<if test="status != null">
    			STATUS = #{status}
    		</if>
    		<if test="title != null">
    			AND TITLE LIKE concat(concat('%',#{title}),'%')
    		</if> -->
    	<where>
    		<if test="status != null">
    			STATUS = #{status}
    		</if>
    		<if test="title != null">
    			AND TITLE LIKE concat(concat('%',#{title}),'%')
    		</if>
    	</where>
    </select>
    
    <!-- By this way, the user's id will use the blog's id. Because the id isn't specified which one will be used.
    <resultMap type="Blog" id="blogResult">
    	<id property="id" column="ID"/>
    	<result property="name" column="NAME"/>
    	<association property="user" column="CREATE_USER" javaType="user">
    		<id property="id" column="ID"/>
    		<result property="name" column="NAME"/>
    		<result property="address" column="ADDRESS"/>
    	</association>
    </resultMap>
    <select id="selectBlogWithUser" resultMap="blogResult">
	SELECT B.ID, B.NAME, U.ID, U.NAME, U.ADDRESS FROM BLOG B INNER JOIN
	USER U ON B.CREATE_USER = U.ID WHERE B.ID = #{id}
    </select> -->
    <resultMap type="Blog" id="blogResult">
    	<id property="id" column="blog_id"/>
    	<result property="name" column="blog_name"/>
    	<association property="user" column="CREATE_USER" javaType="user">
    		<id property="id" column="user_id"/>
    		<result property="name" column="user_name"/>
    		<result property="address" column="ADDRESS"/>
    	</association>
    </resultMap>
    <select id="selectBlogWithUser" resultMap="blogResult">
	SELECT B.ID AS blog_id, B.NAME AS blog_name, U.ID user_id, U.NAME
	user_name, U.ADDRESS FROM BLOG B INNER JOIN
	USER U ON B.CREATE_USER =
	U.ID WHERE B.ID = #{id}
    </select>
    
    <resultMap type="Blog" id="blogResult2">
    	<id property="id" column="blog_id"/>
    	<result property="name" column="blog_name"/>
    	<!-- resultMap is other's namespace + resultMap id -->
    	<association property="user" column="CREATE_USER" javaType="user" resultMap="com.learning.spring.mapper.UserMapper.userResultMap"/>
    </resultMap>
    <select id="selectBlogWithUser2" resultMap="blogResult2">
	SELECT B.ID AS blog_id, B.NAME AS blog_name, U.*
	FROM BLOG B INNER JOIN
	USER U ON B.CREATE_USER =
	U.ID WHERE B.ID = #{id}
    </select>
</mapper>