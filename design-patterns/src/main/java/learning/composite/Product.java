package learning.composite;

/**
 * 将对象组合成树形结构以表示"部分-整体"的层次结构，使得用户对单个对象和组合对象的使用具有一致性
 *
 * 核心：是否需要构成树形，使其对单个对象和组合对象的使用具有一致性
 *
 * 应用场景：维护和展示部分-整体关系的场景，就是出现树形结构的场景
 *
 * 组合模式适用性
 *  如果你需要实现树状对象结构， 可以使用组合模式。
 *
 *  组合模式为你提供了两种共享公共接口的基本元素类型： 简单叶节点和复杂容器。 容器中可以包含叶节点和其他容器。 这使得你可以构建树状嵌套递归对象结构。
 *
 *  如果你希望客户端代码以相同方式处理简单和复杂元素， 可以使用该模式。
 *
 *  组合模式中定义的所有元素共用同一个接口。 在这一接口的帮助下， 客户端不必在意其所使用的对象的具体类。
 */
public abstract class Product {
    public float getPrice() {
        return 0.0f;
    }
}
