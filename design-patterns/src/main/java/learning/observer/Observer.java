package learning.observer;

/**
 * 定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并被自动更新
 *
 * 其实它就是一种订阅和发布的关系，允许你定义一种订阅机制， 可在对象事件发生时通知多个 “观察” 该对象的其他对象。
 *
 * 核心：就是观察者接口和发布者类，发布者和观察者的一切关系就是这个观察者接口，通过这个接口来传递信息，而且所有的观察者都得实现该接口
 *
 * 在观察之前得先将观察者注册到需要被观察的对象里面
 *
 * 观察者模式适用性
 *  当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式。
 *
 *  当你使用图形用户界面类时通常会遇到一个问题。 比如， 你创建了自定义按钮类并允许客户端在按钮中注入自定义代码， 这样当用户按下按钮时就会触发这些代码。
 *
 * 观察者模式允许任何实现了订阅者接口的对象订阅发布者对象的事件通知。 你可在按钮中添加订阅机制， 允许客户端通过自定义订阅类注入自定义代码。
 *
 *  当应用中的一些对象必须观察其他对象时， 可使用该模式。 但仅能在有限时间内或特定情况下使用。
 *
 *  订阅列表是动态的， 因此订阅者可随时加入或离开该列表。
 */
public interface Observer {
    void update(String name, String newProduct);
}
