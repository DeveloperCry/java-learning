/**
 * 
 */
package com.learning.mode.factory.multiple;

import com.learning.mode.factory.simple.Vehicle;

/**
 * @author Xiong.Liu
 * 
 * 当遇到一个复杂的项目，初始化一个对象很费事的时候，我们可以使用多工厂模式，即一个工厂只生产特定的某种产品，实现了单一职责。
 * 每一个产品类都对应了一个创建类，好处就是创建类的职责清晰，而且结构简单，但是给可扩展性和可维护性带来了一定的影响。
 * 为什么这么说呢？如果要扩展一个产品类，就需要建立一个相应的工厂类，这样就增加了扩展的难度。因为工厂类和产品类的数量相同，维护时需要考虑两个对象之间的关系。
 * 当然，在复杂的应用中一般采用多工厂的方法，然后再增加一个协调类，避免调用者与各个子工厂交流，协调类的作用是封装子工厂类，对高层模块提供统一的访问接口。
 * 
 * 简单工厂模式相比于工厂方法模式
 * 优点：工厂类中包含必要的逻辑判断，可根据客户端的选择条件动态实例化需要的类。对于客户端来说，去除了对具体产品的依赖。
 * 缺点：违背了开放封闭原则。 每添加一个新的产品，都需要对原有类进行修改。增加维护成本，且不易于维护。
 * 开发封闭原则：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。
 */
public interface Creator {
	public Vehicle factoryMethod();
}
