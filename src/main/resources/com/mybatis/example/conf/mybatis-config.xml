<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<properties resource="com/mybatis/example/conf/database.properties" />
	<settings>
		<setting name="cacheEnabled" value="true" />
		<!-- <setting name="lazyLoadingEnabled" value="true" /> -->
		<setting name="multipleResultSetsEnabled" value="true" />
		<setting name="useColumnLabel" value="true" />
		<setting name="useGeneratedKeys" value="false" />
		<setting name="autoMappingBehavior" value="PARTIAL" />
		<!-- <setting name="autoMappingUnknownColumnBehavior" value="WARNING" /> -->
		<setting name="defaultExecutorType" value="SIMPLE" />
		<setting name="defaultStatementTimeout" value="25" />
		<setting name="defaultFetchSize" value="100" />
		<setting name="safeRowBoundsEnabled" value="false" />
		<!-- 是否开启自动驼峰命名规则（camel case）映射, 即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射. -->
		<setting name="mapUnderscoreToCamelCase" value="true" />
		<setting name="localCacheScope" value="SESSION" />
		<setting name="jdbcTypeForNull" value="OTHER" />
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
		<setting name="logImpl" value="LOG4J"/>
	</settings>

	<typeAliases>
		<typeAlias alias="Blog" type="com.mybatis.example.enity.Blog" />
		<typeAlias alias="Page" type="com.mybatis.example.enity.Page" />
		<typeAlias alias="User" type="com.mybatis.example.enity.User" />
	</typeAliases>
	
	<objectFactory type="com.mybatis.example.factory.ExampleObjectFactory">
		<property name="someProperty" value="100"/>
		<property name="someProperty1" value="1000"/>
	</objectFactory>
	
	<plugins>
		<!-- <plugin interceptor="com.mybatis.example.plugins.MyPlugin">
			<property name="prop1" value="prop1"/>
			<property name="prop2" value="prop2"/>
		</plugin> -->
		<plugin interceptor="com.mybatis.example.plugins.PageInterceptor">
			<property name="databaseType" value="mysql"/>
		</plugin>
	</plugins>
	
	<environments default="development">
		<environment id="development">
			<!-- JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。 MANAGED – 
				这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接， 
				然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。 -->
			<transactionManager type="JDBC" />
			<!-- <transactionManager type="MANAGED"> <property name="closeConnection" 
				value="false"/> </transactionManager> -->
			<!-- 如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载： 1.在 properties 元素体内指定的属性首先被读取。 
				2.然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。 
				3.最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。 因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 
				properties 属性中指定的属性。 -->
			<dataSource type="POOLED">
				<property name="driver" value="${driver}" />
				<property name="url" value="${url}" />
				<property name="username" value="${username}" />
				<property name="password" value="${password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- Put this in the back of environments -->
	<databaseIdProvider type="DB_VENDOR">
	  	<property name="SQL Server" value="sqlserver"/>
	  	<property name="DB2" value="db2"/>        
	  	<property name="Oracle" value="oracle" />
	  	<property name="MySQL" value="mysql" />
	</databaseIdProvider>
	
	<!-- 指定数据表映射文件位置，有以下四种方式： 
		1.使用相关资源 <mappers> <mapper resource="XXX/YYY/ZZZ/WWW.xml"/></mappers>  
		2.使用全路径 <mappers> <mapper url="file:///XXX.xml" /> </mappers> 
		3.使用映射接口名称 <mappers> <mapper class="XXX.YYY.ZZZ.ClassName" /> </mappers> 
		4.使用包名称 <mappers> <package name="XXX/YYY/ZZZ" /> </mappers> -->
	<mappers>
		<mapper class="com.mybatis.example.mapper.BlogMapper" />
		<mapper class="com.mybatis.example.mapper.UserMapper" />
		<mapper resource="com/mybatis/example/mappers/BlogMapper.xml" />
		<mapper resource="com/mybatis/example/mappers/UserMapper.xml" />
	</mappers>
</configuration>